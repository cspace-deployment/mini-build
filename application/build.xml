<project name="tenant-customizations-application" default="deploy" basedir=".">
    <description>Per-tenant application customizations for CollectionSpace</description>
    
    <!-- 'environment' must be declared to bring values of system -->
    <!-- environment variables into Ant, prior to reading any -->
    <!-- properties files that may reference those values. -->
    <property environment="env" />
    
    <!-- Set global properties for this build -->
    <property file="../build.properties" />
    <!-- Set tenant-specific properties for this build -->
    <property file="../our-tenant.properties" />
    <!-- Set application layer-specific properties for this build -->
    <property file="application.properties" />
    
    <!-- Setup for additional Ant tasks required by this buildfile, -->
    <!-- pointing Ant at the correct JAR files and resource locations for: -->
    <!-- The Missing Link HTTP/HTTPS Ant task -->
    <!-- The Ant Contrib set of tasks -->
    <property name="ml-ant-http.jar" value="ml-ant-http-1.1.3.jar" />
    <property name="ant-contrib.jar" value="ant-contrib-1.0b3.jar" />
    
    <fileset id="runtime.libs" dir="./lib">
        <include name="${ml-ant-http.jar}" />
        <include name="${ant-contrib.jar}" />
    </fileset>
    <path id="runtime.classpath">
        <fileset refid="runtime.libs" />
    </path>
    <taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
        <classpath refid="runtime.classpath" />
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath refid="runtime.classpath" />
    </taskdef>

    <target name="deploy"
        description="Deploy tenant-specific application customizations to the deployment location (i.e. the appropriate CollectionSpace server folder)" 
        depends="check-config-exists, deploy-to-config">
    </target>
    
    <target name="check-config-exists"
        description="Identify whether the deployment location exists">
        <available type="dir" file="${application.config.path}"
            property="application.config.path.exists" />
    </target>
    
    <target name="deploy-to-config"
        description="Copies tenant-specific application customizations to the deployment location"
        depends="deploy-tenant-config, deploy-tenant-host-config">
    </target>
    
    <!-- Copies and renames *-tenant.xml -->
    <target name="deploy-tenant-config"
        description="Copies tenant-specific application configuration settings to the deployment location"
        if="${application.config.path.exists}"
        depends="update-config-with-tenant">
        <!-- Copy the placeholder tenant config, changing its name -->
        <!-- to the actual tenant's short name and applying a new -->
        <!-- filename prefix -->
        <copy todir="${application.config.path}">
            <fileset dir="${application.our.tenant}" 
                includes="**/${sample.tenant.name.short}-tenant.xml" />
            <globmapper from="${sample.tenant.name.short}-tenant.xml"
                to="cspace-config-${our.tenant.name.short}.xml" />
        </copy>
        <!-- Copy any other tenant config files in this directory as well, -->
        <!-- applying a new filename prefix -->
        <copy todir="${application.config.path}">
            <fileset dir="${application.our.tenant}"
                includes="**/*-tenant.xml"
                excludes="**/${sample.tenant.name.short}-tenant.xml" />
            <globmapper from="*-tenant.xml"
                to="cspace-config-*.xml" />
       </copy>
    </target>

    <!-- Copies and renames *-local-settings.xml -->
    <target name="deploy-tenant-host-config"
        description="Copies tenant-specific, host-related application configuration settings (hosts, ports, URLs, etc. relevant to this tenant) to the deployment location"
        if="${application.config.path.exists}"
        depends="update-tenant-id, update-host-config-with-domain, update-host-config-with-tenant">
        <copy todir="${application.config.path}">
            <fileset dir="${application.our.tenant}" 
                includes="${sample.tenant.name.short}-${application.local.settings.suffix}" />
            <globmapper from="${sample.tenant.name.short}-${application.local.settings.suffix}"
                to="${our.tenant.name.short}-${application.local.settings.suffix}" />
        </copy>
        <!-- Copy any other host-related configuration files in this directory as well, without renaming them during copying. -->
        <copy todir="${application.config.path}">
            <fileset dir="${application.our.tenant}" 
                includes="**/*-${application.local.settings.suffix}" 
                excludes="**/${sample.tenant.name.short}-${application.local.settings.suffix}" />
        </copy>
    </target>

    <!-- Inserts customized tenant name in the 'include' reference to a local-settings.xml file in *-tenant.xml -->
    <target name="update-config-with-tenant"
        description="Updates tenant-specific application configuration settings to reflect the customized tenant name">
        <replaceregexp
            match="include src=(.*),settings.xml"
            replace="include src=&quot;${our.tenant.name.short}-${application.local.settings.suffix},settings.xml">
            <fileset dir="${application.our.tenant}" includes="**/*-tenant.xml" />
        </replaceregexp>
    </target>
    
    <target name="update-tenant-id"
        description="Updates the tenant ID">
        <echo message="id=${our.tenant.id}" />
        <replaceregexp
            match="&lt;tenant&gt;(.*)&lt;/tenant&gt;"
            replace="&lt;tenant&gt;${our.tenant.id}&lt;/tenant&gt;">
            <fileset dir="${application.our.tenant}" 
                includes="**/${sample.tenant.name.short}-${application.local.settings.suffix}" />
        </replaceregexp>
   </target>
    
    <!-- Replaces default tenant Internet domain with customized Internet domain in *local-settings.xml -->
    <target name="update-host-config-with-domain"
        description="Updates tenant-specific, host-related application configuration settings to reflect the customized tenant Internet domain">
         <replaceregexp
            match="${application.default.domain}"
            replace="${our.tenant.domain}"
            flags="g">
            <fileset dir="${application.our.tenant}" 
                includes="**/${sample.tenant.name.short}-${application.local.settings.suffix}" />
        </replaceregexp>
    </target>

    <!-- Replaces default tenant name with customized tenant name in *local-settings.xml -->
    <target name="update-host-config-with-tenant"
        description="Updates tenant-specific, host-related application configuration settings to reflect the customized tenant name">
         <replaceregexp
            match="${application.default.tenant}"
            replace="${our.tenant.name.short}"
            flags="g">
            <fileset dir="${application.our.tenant}" 
                includes="**/${sample.tenant.name.short}-${application.local.settings.suffix}" />
        </replaceregexp>
    </target>
    
    <!-- This target is not yet complete, but rather demonstrates an approach that may work. -->
    <target name="reload"
        description="Reloads the application layer configuration settings on the running server">
    
        <echo message="Reloading the application configuration on the running Collectionspace Server" />

        <!-- Ask for the username and password of an admin user in this tenant -->
        <input
            message="Please enter a CollectionSpace admin username [or press Return for default value in brackets]"
            addproperty="application.user"
            defaultvalue="${application.default.admin.user}" />
        <input
            message="Please enter the password for user ${application.user} [or press Return for default value in brackets]"
            addproperty="application.password"
            defaultvalue="${application.default.admin.password}" >
            <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
        </input>
        
        <!-- URLencode the username and password, and build an entity body for the login request. -->
        <urlencode name="application.user.urlencoded" value="${application.user}" />
        <urlencode name="application.password.urlencoded" value="${application.password}" />
        <property name="entity.body.login"
            value="userid=${application.user.urlencoded}&amp;password=${application.password.urlencoded}" />    
               
        <!-- Set connection properties for the requests. -->
        <!-- Note: protocol/host/port connection properties, used below, can be set in the 'application.properties' file -->
        <property name="url.host" value="${application.protocol}://${application.host}:${application.port}" />
        <property name="url.path.login" value="/collectionspace/tenant/${our.tenant.name.short}/login" />
        <property name="url.path.app.config.reload" value="/collectionspace/chain/init" />
    
        <echo message="Logging into the ${our.tenant.name.short} tenant ..." />

        <!-- Log into the tenant -->
        <http method="POST" url="${url.host}${url.path.login}" 
            statusProperty="status.property.login" >
            <!-- printrequest="true" printresponse="true" -->
            <headers>
                <header name="Content-Type" value="application/x-www-form-urlencoded" />
            </headers>
            <entity value="${entity.body.login}" />
        </http>
        
        <echo message="${status.property.login}" />
        
        <echo message="Reloading the application configuration for the ${our.tenant.name.short} tenant ..." />
        
        <!-- Reload configuration settings for the tenant -->
        <http method="GET" url="${url.host}${url.path.app.config.reload}" 
            statusProperty="status.property.reload" >
            <!-- printrequest="true" printresponse="true" -->
            <headers>
                <!-- Need to read the actual value of this cookie from the response to the POST above. -->
                <!-- Doing so will likely require a forthcoming version 1.1.4 of The Missing Link Ant HTTP Task. -->
                <!-- This is a one-time placeholder to demonstrate that this works; this GET will -->
                <!-- fail once the session cookie value changes. -->
                <header name="Cookie" value="CSPACESESSID=40536b380b53280150ad0ec5936dedcb" />
            </headers>
        </http>
        
       <echo message="${status.property.reload}" />

        
    </target>

</project>
